Стиль исходного кода РДО:

1. Комментарии.
1.0. Язык комментариев русский или английский.
1.1. Для автоматизации процесса создания документации системы и для структуризации комментариев исходного кода РДО в системе принят стандарт комментариев Doxygen.
1.2. В обязательном порядке докумментируются
1.2.1. файлы
/*!
  \copyright (c) RDO-Team, 2011
  \file      rdocalc.h
  \authors   Барс Александр
  \authors   Урусов Андрей (rdo@rk9.bmstu.ru)
  \authors   Лущан Дмитрий (dluschan@rk9.bmstu.ru)
  \date      16.05.2007
  \brief     Вычислитель
  \indent    4T
*/

1.2.1.1. Автор указывается в формате: Фамилия Имя (e-mail). На русском. См. пример выше.

1.2.2. Пользовательские типы данных:
классы                   - class
интерфейсы               - такого понятия в C++ нет. под интерфейсами подразумеваются классы, не имеющие ни членов-данных, ни членов-функций кроме чисто виртуальных, имена которых начинаются с буквы I
стуруктуры               - struct
именованные перечисления - enum
объединения              - union

1.2.3. Интерфейсные (public) методы, остальные при необходимости
1.2.4. Макросы, кроме стражей включения и декларации интерфейсов
1.2.5. Синонимы типов данных в простанствах имен и глобальные

1.3. Стиль doxy-комментариев - Qt-style:

/*!
  \class    RDOCalc
  \brief    Абстрактный "вычислитель", он же калк.
  \details  Cкомпилированная модель состоит из последовательоности калков, так же как и скомпилированная программа состоит из ассемблеровских команд. Данный класс описывает базовый, абстрактный калк.
*/

//! Тип операции в РДО
enum Type
{
	OT_ARITHM, //!< Арифметическое выражение
	OT_LOGIC   //!< Логическое выражение
};

/*!
  \fn      virtual BOResult onDoOperation(CREF(rdoRuntime::LPRDORuntime) pRuntime)
  \brief   Выполнение
  \details Вызывается для выполнения правил/операций
  \return  BOResult результат выполнения операции
  \param   pRuntime константная ссылка на указатель на Рантайм
*/
virtual BOResult onDoOperation(CREF(rdoRuntime::LPRDORuntime) pRuntime) = 0;

//! Проверка на точки останова
virtual bool breakPoints() = 0;

2. стражи включения.
2.1. имя макроса-стража пишется большими буквами, знаком подчеркивания и ничем больше.
2.2. имя макроса-стража начинается и заканчивается единичным знаком подчеркивания. между ними пишется имя файла с упоминанием всех директорий (библиотек) от корня РДО, где он находится, но без включения слова RDO. Смысловые части слов разделяется единичным знаком подчеркивания (даже в том случае, если в названии файла они написаны слитно). Например, так будут выглядеть стражи для следующих файлов:
\rdo_studio\rdo_lib\rdo_parser\expression.h      _LIB_PARSER_EXPRESSION_H_
\rdo_studio\rdo_lib\rdo_runtime\rdodptrtime.h    _LIB_RUNTIME_DPT_RTIME_H_
\rdo_studio\rdo_lib\rdo_runtime\rdo_res_type_i.h _LIB_RUNTIME_RES_TYPE_H_

3. файлы.
3.1. создавая новый класс, необходимо придерживаться модели h + inl + cpp. Она подразумевает, что заголовочный файл (*.h) содержит только декларацию членов. Встроенные методы (inline), следует реализовывать в (*.inl)-файле. Обычные (не встроенные) - в соответствующем (*.cpp)-файле. При этом, *.h должен содержать #include на свой *.inl, указываемый в самом конце (*.h)-файла, перед закрытием стража.

4. Типы данных.
4.1. Использовать встроенные типы данных, такие как: int, unsigned, long, float, double, char, bool, * (указатель), & (ссылка) и библиотечный класс std::basic_string<char> (std::string) запрещено. Краткая таблица синонимом

std::string            -> tstring
signed int             -> rsint
unsigned int           -> ruint
signed long long int   -> rsint64
unsigned long long int -> ruint64
unsigned char          -> rbyte

A&                     -> REF(A)
const A&               -> CREF(A)
A*                     -> PTR(A)
const A*               -> CPTR(A)
const A* const         -> CPTRC(A)

Все синонимы можно посмотреть в rdo_common\rdotypes.h и \rdomacros.h.

5. Использование ключевых слов C++ и макросов.
5.1. Кроме специально оговоренных случаев создавать макросы запрещается
5.1.1. Необходимо создавать макрос, декларирующий интерфейс сразу после создания интерфейсного класса
5.2. class/struct не пользоваться - пользоваться макросами
5.3. using namespace для РДО-исходников запрещен - пользоваться макросами
5.4. using namespace для внешних библиотек (std, boost...) запрещен, идентификаторы пишутся полностью, например, std::cout
5.3. Оператором new пользоваться нельзя - пользуйтесь фабрикой (rdo::Factory)
5.5. Строчки и отдельные символы заключаются в макрос _T: _T("some text"), _T('a')
5.6. При описании контейнера необходимо использовать typedef

'старый' код
std::list<ruint> intList;

std::list<ruint>::iterator it = intList.begin();
while (it != intList.end())
{
	...
	++it;
}

'новый' код
typedef std::list<ruint> IntList;
IntList intList;

IntList::iterator it = intList.begin();
while (it != intList.end())
{
	...
	++it;
}

'совсем новый' код
typedef std::list<ruint> IntList;
IntList intList;

STL_FOR_ALL(intList, it)
{
	...
}

5.7. При использовании итераторов использовать префиксную нотацию
++it;
--it;
вместо
it++;
it--;
за исключением случаев, когда вы точно уверены, что необходимо второе.

6. Правила именования  сущностей (классов, методов, атрибутов, токенов и т.д.)
6.1. Имена должны быть настолько понятными, чтобы не возникало желания писать комментарий
6.2. Атрибуты (переменные класса) начинаются с m_, пишутся с маленькой буквы
ruint   m_count;
tstring m_message;

6.3. Указатели начинаются с символа p
PTR(A) pA = ... //! для локальной переменной
PTR(A) m_pA;    //! для атрибута

6.4. Названия методов и функций начинается с маленькой буквы, никаких префиксов не имеют
void fun();

6.5. Если название атрибута/метода длинное (состоит из нескольких слов), то они указываются с большой буквы, начиная со второго. подчеркивания не допускаются (кроме m_)
ruint m_errorCounter;         //! атрибут
ruint errorCounter;           //! локальная перемнная
ruint getErrorCounter() const //! метод класса

6.6. Для константных методов не ленитесь писать модификатор const
6.7. Глобальные переменные начинаются с префикса g_
6.8. Статические атрибуты классов начинаются с префикса s_
6.9. Имена токенов лексера и бизона
6.9.1. Слова в именах токенов разделяются знаком подчеркивания.
6.9.2. Простые токены начинаются с "RDO", например, RDO_Calculate_if.
6.9.3. За основу названия простого токена следует брать соответствующее ключевое слово РДО, например:
integer        - RDO_integer
temporary      - RDO_temporary
Decision_point - RDO_Decision_point

6.9.4. Составные токены записываются полностью маленькими буквами, например, dpt_search_prior.
6.9.5. Имя состовного токена должно начинаться с трехбуквенного обозначения соответствующей закладки РДО, например:
rss_resources_begin
rtp_param
pat_common_choice
Исключение - "Общие составные токены для всех объектов РДО":
fun_arithm
fun_logic
fun_select_body
и т.д.

7. переносы строк и символы разделители.
7.1. открывающую фигурную скобку писать на новой строке
if (a > b)
{
	return true;
}

7.2. else тоже пишется с новой строки
if (a > b)
{
	return true;
}
else
{
	return false;
}

7.3. Многоярусные if-else можно писать без набегающего отступа слева, например
if (str == _T("a1"))
{
}
else if (str == _T("a2"))
{
}
else if (str == _T("a3"))
{
}
Но подобные конструкции настоятельно не рекомендуются к использованию и свидетельствуют о плохом дизайне функции.

7.4. Табуляция - 4T (вставляется символ табуляции, его длина равна четырём символам). если в качестве редактора исходных кодов вы пользуетесь ms visual studio (настроенной по умолчанию), то выравнивание текста слева по умолчанию правильное, т.е. самостоятельно пользоваться табуляцией не нужно (имеется ввиду "идеальный" набор текста без исправлений, возвратов, стираний и т.д.).

8. Инклюды
8.1. Инклюды для *.cpp должны включать в себя три секции
// ---------------------------------------------------------------------------- PCH
#include "rdo_lib/rdo_runtime/pch.h"
// ----------------------------------------------------------------------- INCLUDES
#include <vector>
// ----------------------------------------------------------------------- SYNOPSIS
#include "rdo_common/namespace.h"
#include "rdo_lib/rdo_runtime/rdocalc.h"
#include "rdo_lib/rdo_runtime/rdo_runtime.h"
#include "rdo_lib/rdo_runtime/rdo_activity.h"
// --------------------------------------------------------------------------------

В секции PCH указывается файл, на основе которого собиралась прекомпиляция хедеров.
В секции INCLUDES указываются файлы внешних библиотек.
В секции SYNOPSIS - файлы библиотек РДО.

8.2. Инклюды для *.h и *.inl должны включать в себя две секции
// ----------------------------------------------------------------------- INCLUDES
#include <vector>
// ----------------------------------------------------------------------- SYNOPSIS
#include "rdo_common/namespace.h"
#include "rdo_lib/rdo_runtime/rdocalc.h"
#include "rdo_lib/rdo_runtime/rdo_runtime.h"
#include "rdo_lib/rdo_runtime/rdo_activity.h"
// --------------------------------------------------------------------------------
